package cn.com.easytaxi.taxi.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import cn.com.easytaxi.ui.bean.MsgBean;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MSG_BEAN.
*/
public class MsgBeanDao extends AbstractDao<MsgBean, Long> {

    public static final String TABLENAME = "MSG_BEAN";

    /**
     * Properties of entity MsgBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Body = new Property(1, String.class, "body", false, "BODY");
        public final static Property Date = new Property(2, java.util.Date.class, "date", false, "DATE");
        public final static Property MsgType = new Property(3, Integer.class, "msgType", false, "MSG_TYPE");
        public final static Property MsgSubType = new Property(4, Integer.class, "msgSubType", false, "MSG_SUB_TYPE");
        public final static Property IsShow = new Property(5, Integer.class, "isShow", false, "IS_SHOW");
        public final static Property IsTTS = new Property(6, Integer.class, "isTTS", false, "IS_TTS");
        public final static Property Url = new Property(7, String.class, "url", false, "URL");
        public final static Property Read = new Property(8, Boolean.class, "read", false, "READ");
    };


    public MsgBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MsgBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MSG_BEAN' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'BODY' TEXT," + // 1: body
                "'DATE' INTEGER," + // 2: date
                "'MSG_TYPE' INTEGER," + // 3: msgType
                "'MSG_SUB_TYPE' INTEGER," + // 4: msgSubType
                "'IS_SHOW' INTEGER," + // 5: isShow
                "'IS_TTS' INTEGER," + // 6: isTTS
                "'URL' TEXT," + // 7: url
                "'READ' INTEGER);"); // 8: read
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MSG_BEAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MsgBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getCacheId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(2, body);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(3, date.getTime());
        }
 
        Integer msgType = entity.getMsgType();
        if (msgType != null) {
            stmt.bindLong(4, msgType);
        }
 
        Integer msgSubType = entity.getMsgSubType();
        if (msgSubType != null) {
            stmt.bindLong(5, msgSubType);
        }
 
        Integer isShow = entity.getIsShow();
        if (isShow != null) {
            stmt.bindLong(6, isShow);
        }
 
        Integer isTTS = entity.getIsTTS();
        if (isTTS != null) {
            stmt.bindLong(7, isTTS);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(8, url);
        }
 
        Boolean read = entity.getRead();
        if (read != null) {
            stmt.bindLong(9, read ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MsgBean readEntity(Cursor cursor, int offset) {
        MsgBean entity = new MsgBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // body
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // date
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // msgType
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // msgSubType
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // isShow
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // isTTS
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // url
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0 // read
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MsgBean entity, int offset) {
        entity.setCacheId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBody(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setMsgType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setMsgSubType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setIsShow(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setIsTTS(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRead(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MsgBean entity, long rowId) {
        entity.setCacheId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MsgBean entity) {
        if(entity != null) {
            return entity.getCacheId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
