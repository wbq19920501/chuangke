package cn.com.easytaxi.taxi.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.util.Log;
import cn.com.easytaxi.AppLog;
import cn.com.easytaxi.book.BookBean;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table BOOK_BEAN.
 */
public class BookBeanDao extends AbstractDao<BookBean, Long> {

	public static final String TABLENAME = "BOOK_BEAN";

	/**
	 * Properties of entity BookBean.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id", true, "_id");
		public final static Property Count = new Property(1, Integer.class, "count", false, "COUNT");
		public final static Property Points = new Property(2, Integer.class, "points", false, "POINTS");
		public final static Property Evaluate = new Property(3, Integer.class, "evaluate", false, "EVALUATE");
		public final static Property PassengerPhone = new Property(4, String.class, "passengerPhone", false, "PASSENGER_PHONE");
		public final static Property PassengerName = new Property(5, String.class, "passengerName", false, "PASSENGER_NAME");
		public final static Property PassengerId = new Property(6, Long.class, "passengerId", false, "PASSENGER_ID");
		public final static Property Source = new Property(7, Integer.class, "source", false, "SOURCE");
		public final static Property SourceName = new Property(8, String.class, "sourceName", false, "SOURCE_NAME");
		public final static Property StartAddress = new Property(9, String.class, "startAddress", false, "START_ADDRESS");
		public final static Property StartLongitude = new Property(10, Integer.class, "startLongitude", false, "START_LONGITUDE");
		public final static Property StartLatitude = new Property(11, Integer.class, "startLatitude", false, "START_LATITUDE");
		public final static Property EndAddress = new Property(12, String.class, "endAddress", false, "END_ADDRESS");
		public final static Property EndLongitude = new Property(13, Integer.class, "endLongitude", false, "END_LONGITUDE");
		public final static Property EndLatitude = new Property(14, Integer.class, "endLatitude", false, "END_LATITUDE");
		public final static Property State = new Property(15, Integer.class, "state", false, "STATE");
		public final static Property PriceMode = new Property(16, Integer.class, "priceMode", false, "PRICE_MODE");
		public final static Property Price = new Property(17, Integer.class, "price", false, "PRICE");
		public final static Property ReplyerName = new Property(18, String.class, "replyerName", false, "REPLYER_NAME");
		public final static Property ReplyerId = new Property(19, Long.class, "replyerId", false, "REPLYER_ID");
		public final static Property ReplyerPhone = new Property(20, String.class, "replyerPhone", false, "REPLYER_PHONE");
		public final static Property ReplyTime = new Property(21, String.class, "replyTime", false, "REPLY_TIME");
		public final static Property ReplyerType = new Property(22, Integer.class, "replyerType", false, "REPLYER_TYPE");
		public final static Property BookType = new Property(23, Integer.class, "bookType", false, "BOOK_TYPE");
		public final static Property UseTime = new Property(24, String.class, "useTime", false, "USE_TIME");
		public final static Property ForecastDistance = new Property(25, Integer.class, "forecastDistance", false, "FORECAST_DISTANCE");
		public final static Property AudioName = new Property(26, String.class, "audioName", false, "AUDIO_NAME");
		public final static Property AudioIp = new Property(27, String.class, "audioIp", false, "AUDIO_IP");
		public final static Property AudioPort = new Property(28, Integer.class, "audioPort", false, "AUDIO_PORT");
		public final static Property ForecastPrice = new Property(29, Integer.class, "forecastPrice", false, "FORECAST_PRICE");
	};

	public BookBeanDao(DaoConfig config) {
		super(config);
	}

	public BookBeanDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'BOOK_BEAN' (" + //
				"'_id' INTEGER PRIMARY KEY ," + // 0: id
				"'COUNT' INTEGER," + // 1: count
				"'POINTS' INTEGER," + // 2: points
				"'EVALUATE' INTEGER," + // 3: evaluate
				"'PASSENGER_PHONE' TEXT," + // 4: passengerPhone
				"'PASSENGER_NAME' TEXT," + // 5: passengerName
				"'PASSENGER_ID' INTEGER," + // 6: passengerId
				"'SOURCE' INTEGER," + // 7: source
				"'SOURCE_NAME' TEXT," + // 8: sourceName
				"'START_ADDRESS' TEXT," + // 9: startAddress
				"'START_LONGITUDE' INTEGER," + // 10: startLongitude
				"'START_LATITUDE' INTEGER," + // 11: startLatitude
				"'END_ADDRESS' TEXT," + // 12: endAddress
				"'END_LONGITUDE' INTEGER," + // 13: endLongitude
				"'END_LATITUDE' INTEGER," + // 14: endLatitude
				"'STATE' INTEGER," + // 15: state
				"'PRICE_MODE' INTEGER," + // 16: priceMode
				"'PRICE' INTEGER," + // 17: price
				"'REPLYER_NAME' TEXT," + // 18: replyerName
				"'REPLYER_ID' INTEGER," + // 19: replyerId
				"'REPLYER_PHONE' TEXT," + // 20: replyerPhone
				"'REPLY_TIME' TEXT," + // 21: replyTime
				"'REPLYER_TYPE' INTEGER," + // 22: replyerType
				"'BOOK_TYPE' INTEGER," + // 23: bookType
				"'USE_TIME' TEXT," + // 24: useTime
				"'FORECAST_DISTANCE' INTEGER," + // 25: forecastDistance
				"'AUDIO_NAME' TEXT," + // 26: audioName
				"'AUDIO_IP' TEXT," + // 27: audioIp
				"'AUDIO_PORT' INTEGER," + // 28: audioPort
				"'FORECAST_PRICE' INTEGER);"); // 29: forecastPrice
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BOOK_BEAN'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, BookBean entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		Integer count = entity.getCount();
		if (count != null) {
			stmt.bindLong(2, count);
		}

		Integer points = entity.getPoints();
		if (points != null) {
			stmt.bindLong(3, points);
		}

		Integer evaluate = entity.getEvaluate();
		if (evaluate != null) {
			stmt.bindLong(4, evaluate);
		}

		String passengerPhone = entity.getPassengerPhone();
		if (passengerPhone != null) {
			stmt.bindString(5, passengerPhone);
		}

		String passengerName = entity.getPassengerName();
		if (passengerName != null) {
			stmt.bindString(6, passengerName);
		}

		Long passengerId = entity.getPassengerId();
		if (passengerId != null) {
			stmt.bindLong(7, passengerId);
		}

		Integer source = entity.getSource();
		if (source != null) {
			stmt.bindLong(8, source);
		}

		String sourceName = entity.getSourceName();
		if (sourceName != null) {
			stmt.bindString(9, sourceName);
		}

		String startAddress = entity.getStartAddress();
		if (startAddress != null) {
			stmt.bindString(10, startAddress);
		}

		Integer startLongitude = entity.getStartLongitude();
		if (startLongitude != null) {
			stmt.bindLong(11, startLongitude);
		}

		Integer startLatitude = entity.getStartLatitude();
		if (startLatitude != null) {
			stmt.bindLong(12, startLatitude);
		}

		String endAddress = entity.getEndAddress();
		if (endAddress != null) {
			stmt.bindString(13, endAddress);
		}

		Integer endLongitude = entity.getEndLongitude();
		if (endLongitude != null) {
			stmt.bindLong(14, endLongitude);
		}

		Integer endLatitude = entity.getEndLatitude();
		if (endLatitude != null) {
			stmt.bindLong(15, endLatitude);
		}

		Integer state = entity.getState();
		if (state != null) {
			stmt.bindLong(16, state);
		}

		Integer priceMode = entity.getPriceMode();
		if (priceMode != null) {
			stmt.bindLong(17, priceMode);
		}

		Integer price = entity.getPrice();
		if (price != null) {
			stmt.bindLong(18, price);
		}

		String replyerName = entity.getReplyerName();
		if (replyerName != null) {
			stmt.bindString(19, replyerName);
		}

		Long replyerId = entity.getReplyerId();
		if (replyerId != null) {
			stmt.bindLong(20, replyerId);
		}

		String replyerPhone = entity.getReplyerPhone();
		if (replyerPhone != null) {
			stmt.bindString(21, replyerPhone);
		}

		String replyTime =  entity.getReplyTime() ;
		if (replyTime != null) {
			stmt.bindString(22, replyTime);
		}

		Integer replyerType = entity.getReplyerType();
		if (replyerType != null) {
			stmt.bindLong(23, replyerType);
		}

		Integer bookType = entity.getBookType();
		if (bookType != null) {
			stmt.bindLong(24, bookType);
		}

		String useTime = entity.getUseTime();
		if (useTime != null) {
			stmt.bindString(25, useTime);
		}

		Integer forecastDistance = entity.getForecastDistance();
		if (forecastDistance != null) {
			stmt.bindLong(26, forecastDistance);
		}

		String audioName = entity.getAudioName();
		if (audioName != null) {
			stmt.bindString(27, audioName);
		}

		 String audioIp = entity.getAudioIp();
		 if (audioIp != null) {
		 stmt.bindString(28, audioIp);
		 }
		
		 Integer audioPort = entity.getAudioPort();
		 if (audioPort != null) {
		 stmt.bindLong(29, audioPort);
		 }

		Integer forecastPrice = entity.getForecastPrice();
		if (forecastPrice != null) {
			stmt.bindLong(30, forecastPrice);
		}
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public BookBean readEntity(Cursor cursor, int offset) {
		
		AppLog.LogD("------------------------------------------------------------------");
		
		if(cursor == null){
			Log.d("readEntity", " cursor null ");
			AppLog.LogD("------------------------------------null------------------------------");
		}else{
//			cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
			
//			Log.d("readEntity", " cursor id "+ cursor.getLong(offset + 0));
			AppLog.LogD("-------------------------1-----------------------------------------");
		}
		
		
		BookBean entity = new BookBean( //
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // count
				cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // points
				cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // evaluate
				cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // passengerPhone
				cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // passengerName
				cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // passengerId
				cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // source
				cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sourceName
				cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // startAddress
				cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // startLongitude
				cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // startLatitude
				cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // endAddress
				cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // endLongitude
				cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // endLatitude
				cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // state
				cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // priceMode
				cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // price
				cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // replyerName
				cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19), // replyerId
				cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // replyerPhone
				cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // replyTime
				cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // replyerType
				cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // bookType
				cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // useTime
				cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // forecastDistance
				cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // audioName
				cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // audioIp
				cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // audioPort
				cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29) // forecastPrice
		);
		
		AppLog.LogD("-------------------------2-----------------------------------------");
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, BookBean entity, int offset) {
		entity.setCacheId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
		entity.setCount(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
		entity.setPoints(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
		entity.setEvaluate(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
		entity.setPassengerPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
		entity.setPassengerName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
		entity.setPassengerId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
		entity.setSource(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
		entity.setSourceName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
		entity.setStartAddress(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
		entity.setStartLongitude(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
		entity.setStartLatitude(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
		entity.setEndAddress(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
		entity.setEndLongitude(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
		entity.setEndLatitude(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
		entity.setState(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
		entity.setPriceMode(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
		entity.setPrice(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
		entity.setReplyerName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
		entity.setReplyerId(cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19));
		entity.setReplyerPhone(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
		entity.setReplyTime(cursor.isNull(offset + 21) ? "" :  cursor.getString(offset + 21));
		entity.setReplyerType(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
		entity.setBookType(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
		entity.setUseTime(cursor.isNull(offset + 24) ? "" :  cursor.getString(offset + 24));
		entity.setForecastDistance(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
		entity.setAudioName(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
		entity.setAudioIp(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
		entity.setAudioPort(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
		entity.setForecastPrice(cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(BookBean entity, long rowId) {
		entity.setCacheId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(BookBean entity) {
		if (entity != null) {
			return entity.getCacheId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

}
